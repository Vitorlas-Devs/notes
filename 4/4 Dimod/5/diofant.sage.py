

# This file was *autogenerated* from the file diofant.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_7 = Integer(7); _sage_const_30 = Integer(30); _sage_const_47 = Integer(47); _sage_const_49 = Integer(49); _sage_const_100_000 = Integer(100_000); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)# Var, Assume, Solve
y = var('y')
a,b,c = _sage_const_2 , _sage_const_7 , _sage_const_30 
assume(x, 'integer')
assume(y, 'integer')
print("Solutions: (x,y) =", solve(a*x+b*y == c, x, y))

# 1.
print("\n1.")
x, y = var('x y')
t_0 = var('t_0')
a, b, c = _sage_const_47 , _sage_const_49 , _sage_const_100_000 
assume(x, 'integer')
assume(y, 'integer')
assume(t_0, 'integer')
solution = solve(a*x+b*y == c, x, y)
print("(x,y) =", solution)

x_t, y_t = solution
print("x_t =", x_t)
print("y_t =", y_t)

conditions = solve([x_t>=_sage_const_0 , y_t>=_sage_const_0 ], t_0)
print("Conditions: ", conditions)

t_min = ceil(conditions[_sage_const_1 ][_sage_const_0 ].rhs())
t_max = floor(conditions[_sage_const_2 ][_sage_const_0 ].rhs())
print("t_min =", t_min)
print("t_max =", t_max)
print("# of solutions: ", t_max - t_min + _sage_const_1 )

# 2.
print("\n2.")
# download

