

# This file was *autogenerated* from the file hf3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_7 = Integer(7); _sage_const_30 = Integer(30)
class LinDiofantianEq:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def is_solvable(self):
        return self.c % gcd(self.a, self.b) == _sage_const_0 

    def next_solution(self):
        g, s, t = xgcd(self.a, self.b)
        x_0 = s * (self.c / g)
        y_0 = t * (self.c / g)

        if x_0 > _sage_const_0 :
            k = _sage_const_0 
        else:
            k = ceil(-x_0 / (self.b / g))
                
        x = x_0 + k * (self.b / g)
        y = y_0 - k * (self.a / g)

        return x, y

    def prev_solution(self, x, y):
        Ellipsis

d = LinDiofantianEq(_sage_const_2 , _sage_const_7 , _sage_const_30 )
print(d.next_solution())

