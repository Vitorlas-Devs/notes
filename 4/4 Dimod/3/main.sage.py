

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_2 = Integer(2); _sage_const_6 = Integer(6); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_124 = Integer(124)# 1
def divides(x, y):
    return x % y == _sage_const_0 

print(f"2|5: {divides(_sage_const_5 , _sage_const_2 )}")
print(f"3|6: {divides(_sage_const_6 , _sage_const_3 )}")
  
def divides2(x, y):
    return (x/y).is_integer()

print(f"2|5: {divides2(_sage_const_5 , _sage_const_2 )}")
print(f"3|6: {divides2(_sage_const_6 , _sage_const_3 )}")

def divides3(x, y):
    return x // y == x / y

print(f"2|5: {divides3(_sage_const_5 , _sage_const_2 )}")
print(f"3|6: {divides3(_sage_const_6 , _sage_const_3 )}")

def divides4(x, y):
    return x.quo_rem(y)[_sage_const_1 ] == _sage_const_0 

print(f"2|5: {divides4(_sage_const_5 , _sage_const_2 )}")
print(f"3|6: {divides4(_sage_const_6 , _sage_const_3 )}")
  
# 2
def num_of_divisors(x):
  return len(x.divisors())

def sum_of_divisors(x):
  return sum(x.divisors())

print(f"Divisors of 6: {_sage_const_6 .divisors()}")
print(f"Len of divisors of 6: {num_of_divisors(_sage_const_6 )}")
print(f"Sum of divisors of 6: {sum_of_divisors(_sage_const_6 )}")

# 3
s = {_sage_const_2 , _sage_const_3 , _sage_const_4 , _sage_const_6 , _sage_const_124 }

def perfect_number(x):
  return set(x  for x in s if sum(x.divisors()) == _sage_const_2 *x)

x = _sage_const_5 
print(f"Perfect numbers of {x}: {perfect_number(x)}")

